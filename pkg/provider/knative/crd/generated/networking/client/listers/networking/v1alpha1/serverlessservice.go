/*
The MIT License (MIT)

Copyright (c) 2016-2020 Containous SAS

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/networking/pkg/apis/networking/v1alpha1"
)

// ServerlessServiceLister helps list ServerlessServices.
type ServerlessServiceLister interface {
	// List lists all ServerlessServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessService, err error)
	// ServerlessServices returns an object that can list and get ServerlessServices.
	ServerlessServices(namespace string) ServerlessServiceNamespaceLister
	ServerlessServiceListerExpansion
}

// serverlessServiceLister implements the ServerlessServiceLister interface.
type serverlessServiceLister struct {
	indexer cache.Indexer
}

// NewServerlessServiceLister returns a new ServerlessServiceLister.
func NewServerlessServiceLister(indexer cache.Indexer) ServerlessServiceLister {
	return &serverlessServiceLister{indexer: indexer}
}

// List lists all ServerlessServices in the indexer.
func (s *serverlessServiceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessService))
	})
	return ret, err
}

// ServerlessServices returns an object that can list and get ServerlessServices.
func (s *serverlessServiceLister) ServerlessServices(namespace string) ServerlessServiceNamespaceLister {
	return serverlessServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerlessServiceNamespaceLister helps list and get ServerlessServices.
type ServerlessServiceNamespaceLister interface {
	// List lists all ServerlessServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServerlessService, err error)
	// Get retrieves the ServerlessService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServerlessService, error)
	ServerlessServiceNamespaceListerExpansion
}

// serverlessServiceNamespaceLister implements the ServerlessServiceNamespaceLister
// interface.
type serverlessServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerlessServices in the indexer for a given namespace.
func (s serverlessServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerlessService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerlessService))
	})
	return ret, err
}

// Get retrieves the ServerlessService from the indexer for a given namespace and name.
func (s serverlessServiceNamespaceLister) Get(name string) (*v1alpha1.ServerlessService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverlessservice"), name)
	}
	return obj.(*v1alpha1.ServerlessService), nil
}
